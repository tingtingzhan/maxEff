% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/split_dummy.R
\name{split_dummy}
\alias{split_dummy}
\title{Dichotomizing Predictors via Repeated Sample Splits}
\usage{
split_dummy(
  null.model,
  x,
  data,
  n,
  mc.cores = switch(.Platform$OS.type, windows = 1L, detectCores()),
  ...
)
}
\arguments{
\item{null.model}{a regression model (e.g., \link[stats]{lm}, \link[stats]{glm}, or \link[survival]{coxph}, etc.)}

\item{x}{one-sided \link[stats]{formula} to specify
the \link[base]{numeric} predictors \eqn{x}'s as the columns of one \link[base]{matrix} column in \code{data}}

\item{data}{\link[base]{data.frame}}

\item{n, ...}{additional parameters for function \link{rSplit}}

\item{mc.cores}{\link[base]{integer} scalar, see function \link[parallel]{mclapply}}
}
\value{
Function \link{split_dummy} returns an object of \link[base]{class} \code{'split_dummy'}, which is a \link[base]{list} of dichotomizing \link[base]{function}s,
with the input \code{formula} and \code{data} as additional \link[base]{attributes}.
}
\description{
Dichotomizing predictors using repeated sample splits.
}
\details{
Function \link{split_dummy} dichotomizes predictors via repeated sample splits. Specifically,

\enumerate{
\item Generate multiple, i.e., repeated, training-test sample splits (via \link{rSplit})
\item For each candidate predictor \eqn{x_i}, find the \emph{\strong{median-split-dichotomized regression model}} based on the repeated sample splits, see functions \link{splitd_} and \link{quantile.splitd.list};
}
}
\examples{
library(spatstat.grouped)
library(spatstat.grouped.data)
library(survival) # to help ?spatstat.geom::hyperframe understand ?survival::Surv
s = grouped_ppp(hladr + phenotype ~ OS + gender + age | patient_id/image_id, data = wrobel_lung)
sQ = s |>
 aggregate_quantile(by = ~ patient_id, probs = seq.int(from = 0, to = 1, by = .1))
dim(sQ)

sQ0 = sQ[1:100,] # training set
sQ1 = sQ[-(1:100),] # test set

set.seed(2364); m1 = coxph(OS ~ 1, data = sQ0) |>
 split_dummy(x = ~ hladr.quantile, data = sQ0, n = 20L) |> subset(subset = p1 > .15 & p1 < .85) |>
 sort_by(y = abs(cf)) |>
 head(n = 2L)
m1
predict(m1, newdata = sQ1)


}
